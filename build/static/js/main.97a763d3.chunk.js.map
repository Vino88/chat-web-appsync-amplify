{"version":3,"sources":["aws-exports.js","helpers.js","Rooms.js","Chat.js","ChatWithData.js","App.js","serviceWorker.js","index.js"],"names":["awsmobile","withUser","WrappedComponent","state","username","Auth","currentAuthenticatedUser","user","this","setState","attributes","email","props","React","Component","LIST_ROOMS","gql","CREATE_ROOM","DELETE_ROOM","userId","query","fetchPolicy","data","loading","error","message","CircularProgress","console","log","List","subheader","ListSubheader","component","color","aria-label","style","position","align","dense","listRooms","items","map","room","ListItem","key","id","divider","Button","flex","Link","to","ListItemText","primary","secondary","createdAt","mutation","mutate","Fab","bottom","right","onClick","variables","optimisticResponse","deleteRoom","Date","update","cache","readQuery","filter","item","writeQuery","window","location","reload","uuid","createRoom","Chat","subscribeToNewMessages","messages","m","onSend","text","getRoom","styles","container","height","content","when","name","CREATE_MESSAGE","GET_ROOM_MESSAGES","CREATE_MESSAGES_SUB","match","roomId","params","subscribeToMore","results","document","updateQuery","prev","subscriptionData","newMessage","onCreateMessage","Object","assign","createMessage","__typename","owner","Amplify","configure","AppSyncConfig","client","AWSAppSyncClient","url","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","type","aws_appsync_authenticationType","credentials","currentCredentials","jwtToken","a","currentSession","getAccessToken","getJwtToken","complexObjectsCredentials","App","path","ChatWithData","Rooms","withAuthenticator","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.97a763d3.chunk.js","sourcesContent":["/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://l7xcz4jnlrcarht7aeuz3ykpwa.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_cognito_identity_pool_id\": \"us-east-2:1562a812-c5dd-43e3-a5e2-2504cd15edd9\",\n    \"aws_cognito_region\": \"us-east-2\",\n    \"aws_user_pools_id\": \"us-east-2_ssjtgUGQ9\",\n    \"aws_user_pools_web_client_id\": \"2fq6b3b6hefp5vfg84t6n5a8l3\",\n    \"oauth\": {\n        \"domain\": \"vinotest3e756ba5-3e756ba5-apps.auth.us-east-2.amazoncognito.com\",\n        \"scope\": [\n            \"phone\",\n            \"email\",\n            \"openid\",\n            \"profile\",\n            \"aws.cognito.signin.user.admin\"\n        ],\n        \"redirectSignIn\": \"https://apps.d3p9tw1olyeelo.amplifyapp.com/\",\n        \"redirectSignOut\": \"https://apps.d3p9tw1olyeelo.amplifyapp.com/\",\n        \"responseType\": \"code\"\n    },\n    \"federationTarget\": \"COGNITO_USER_POOLS\"\n};\n\n\nexport default awsmobile;\n","import React from \"react\";\r\nimport { Auth } from \"aws-amplify\";\r\n\r\nexport const withUser = WrappedComponent => {\r\n  class HOC extends React.Component {\r\n    state = {\r\n      username: null\r\n    };\r\n    async componentDidMount() {\r\n      const user = await Auth.currentAuthenticatedUser();\r\n      this.setState({\r\n        username: user.attributes.email\r\n      });\r\n    }\r\n    render() {\r\n      const { username } = this.state;\r\n      if (!username) return \"Loading...\";\r\n      return <WrappedComponent {...this.props} username={username} />;\r\n    }\r\n  }\r\n\r\n  return HOC;\r\n};","import React from \"react\";\r\nimport {\r\n  Button,\r\n  List,\r\n  ListSubheader,\r\n  ListItem,\r\n  ListItemText,\r\n  CircularProgress\r\n} from \"@material-ui/core\";\r\nimport { Fab } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TrashIcon from '@material-ui/icons/DeleteSharp';\r\nimport Avatar from '@material-ui/icons/PersonRounded';\r\nimport { Link } from \"react-router-dom\";\r\nimport gql from \"graphql-tag\";\r\nimport uuid from \"uuid/v4\";\r\nimport { Query, Mutation } from \"react-apollo\";\r\nimport { withUser } from \"./helpers\";\r\n\r\n//(filter: {and: {_deleted: {ne: true}}})\r\n\r\nconst LIST_ROOMS = gql`\r\n  query ListRooms {\r\n    listRooms{\r\n      items {\r\n        id\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_ROOM = gql`\r\n  mutation CreateRoom($id: ID!) {\r\n    createRoom(input: { id: $id }) {\r\n      id\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_ROOM = gql`\r\n  mutation DeleteRoom($id: ID!) {\r\n    deleteRoom(input: { id: $id, , _version: 1 }) {\r\n      id\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nfunction roomChat(userId) {\r\n  return (\r\n    <>\r\n      <Query query={LIST_ROOMS} fetchPolicy=\"cache-and-network\">\r\n        {({ data, loading, error }) => {\r\n          if (error) return <div>{error.message}</div>;\r\n          if (loading) return <CircularProgress />;\r\n         const user ={userId};\r\n         console.log(user.userId.username);\r\n          return (\r\n            <List\r\n              subheader={\r\n                <ListSubheader component=\"div\">\r\n                <Avatar color=\"secondary\"\r\n                    aria-label=\"PersonRounded\"\r\n                    style={{ position: \"responsive\", align:\"center\"}}></Avatar>\r\n                  {user.userId.username} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                List of rooms \r\n                  \r\n                </ListSubheader>\r\n              }\r\n              dense\r\n            >\r\n              {data.listRooms.items.map(room => (\r\n                <ListItem key={room.id} divider>\r\n                  <Button\r\n                    style={{ flex: 1 }}\r\n                    component={Link}\r\n                    to={`/room/${room.id}`}\r\n                  >\r\n                    <ListItemText\r\n                      primary={room.id}\r\n                      secondary={room.createdAt}\r\n                    />\r\n                  </Button>\r\n                  \r\n                  <Mutation mutation={DELETE_ROOM}>\r\n                    {mutate => (\r\n                      <Fab\r\n                        color=\"secondary\"\r\n                        aria-label=\"deleteSharp\"\r\n                        style={{ position: \"responsive\", bottom: 10, right: 10 }}\r\n                        onClick={() => {\r\n                          const id = room.id;\r\n                          mutate({\r\n                            variables: {\r\n                              id\r\n                            },\r\n                            optimisticResponse: () => ({\r\n                              deleteRoom: {\r\n                                id,\r\n                                createdAt: new Date()\r\n                              }\r\n                            }),\r\n                            update: (cache, { data: { deleteRoom } }) => {\r\n                              const data = cache.readQuery({ query: LIST_ROOMS });\r\n                              // filter element is there cuz if you are online, you might get the item faster\r\n                              data.listRooms.items = [\r\n                                deleteRoom,\r\n                                ...data.listRooms.items.filter(\r\n                                  item => item.id !== deleteRoom.id\r\n                                )\r\n                              ];\r\n                              cache.writeQuery({ query: LIST_ROOMS, data });\r\n                            } \r\n                          });\r\n                          window.location.reload(false);\r\n                          }}\r\n                      >\r\n                        <TrashIcon />\r\n                      </Fab>\r\n                    )}\r\n                  </Mutation>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          );\r\n        }}\r\n      </Query>\r\n      <Mutation mutation={CREATE_ROOM}>\r\n        {mutate => (\r\n          <Fab\r\n            color=\"primary\"\r\n            aria-label=\"Add\"\r\n            style={{ position: \"absolute\", bottom: 10, right: 10 }}\r\n            onClick={() => {\r\n              const id = uuid(); // generate ID - to be consistent with server after sync\r\n              mutate({\r\n                variables: {\r\n                  id\r\n                },\r\n                optimisticResponse: () => ({\r\n                  createRoom: {\r\n                    id,\r\n                    createdAt: new Date()\r\n                  }\r\n                }),\r\n                update: (cache, { data: { createRoom } }) => {\r\n                  const data = cache.readQuery({ query: LIST_ROOMS });\r\n                  // filter element is there cuz if you are online, you might get the item faster\r\n                  data.listRooms.items = [\r\n                    createRoom,\r\n                    ...data.listRooms.items.filter(\r\n                      items => items.id !== createRoom.id\r\n                    )\r\n                  ];\r\n                  cache.writeQuery({ query: LIST_ROOMS, data });\r\n                }\r\n              });\r\n              window.location.reload(false);\r\n            }}\r\n          >\r\n            <AddIcon />\r\n          </Fab>\r\n        )}\r\n      </Mutation>\r\n    </>\r\n  );\r\n};\r\nexport default withUser(roomChat);","import { GiftedChat } from \"react-web-gifted-chat\";\r\nimport React from \"react\";\r\nimport Avatar from '@material-ui/icons/PersonRounded';\r\nimport { NavBar } from \"aws-amplify-react\";\r\nimport * as moment from 'moment';\r\n\r\nclass Chat extends React.Component {\r\n  componentDidMount() {\r\n    this.props.subscribeToNewMessages();\r\n  }\r\n\r\n  onSend(messages = []) {\r\n    messages.map(m => this.props.onSend(m.text));\r\n  }\r\n\r\n  render() {\r\n    const { loading, error, data, user } = this.props;\r\n    if (error) return <div>{error.message}</div>;\r\n    if (loading) return <div>Loading</div>;\r\n    const messages = data.getRoom.messages.items;\r\n    return (\r\n      <div style={styles.container}>\r\n        <NavBar style={{height: 50}}><Avatar color=\"secondary\"\r\n                      aria-label=\"PersonRounded\"\r\n                      style={{ position: \"responsive\", align:\"right\"}}></Avatar><br></br>\r\n                      <text color=\"secondary\">{user}</text>\r\n        </NavBar>\r\n        <GiftedChat\r\n          messages={messages.map(m => ({\r\n            id: m.id,\r\n            text: m.content,\r\n            createdAt: new Date(m.when),\r\n            user: {\r\n              id: user,\r\n              name: user\r\n            }\r\n          }))}\r\n          onSend={messages => this.onSend(messages)}\r\n          user={{\r\n            id: user\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    flex: 50,\r\n    height: \"90vh\"\r\n  }\r\n};\r\n\r\nexport default Chat;","import React, { Component } from \"react\";\r\nimport { Mutation, Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nimport { withUser } from \"./helpers\";\r\nimport Chat from \"./Chat\";\r\n\r\nconst CREATE_MESSAGE = gql`\r\n  mutation createMessage($roomId: ID!, $when: String!, $content: String!) {\r\n    createMessage(input: { roomId: $roomId, when: $when, content: $content }) {\r\n      __typename\r\n      id\r\n      when\r\n      content\r\n      owner\r\n      roomId\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ROOM_MESSAGES = gql`\r\n  query GetRoomMessages($roomId: ID!) {\r\n    getRoom(id: $roomId) {\r\n      __typename\r\n      messages(limit: 20, sortDirection: DESC) {\r\n        __typename\r\n        items {\r\n          __typename\r\n          id\r\n          when\r\n          content\r\n          owner\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_MESSAGES_SUB = gql`\r\n  subscription OnCreateMessage($roomId: ID!) {\r\n    onCreateMessage(roomId: $roomId) {\r\n      __typename\r\n      id\r\n      when\r\n      content\r\n      owner\r\n      roomId\r\n    }\r\n  }\r\n`;\r\n\r\nfunction ChatWithData({ match, username }) {\r\n  console.log(username);\r\n  return (\r\n    <Query\r\n      variables={{\r\n        roomId: match.params.roomId\r\n      }}\r\n      query={GET_ROOM_MESSAGES}\r\n    >\r\n      {({ data, subscribeToMore, ...results }) => (\r\n        <Mutation mutation={CREATE_MESSAGE}>\r\n          {mutate => (\r\n            <Chat\r\n              {...results}\r\n              user={username}\r\n              data={data}\r\n              subscribeToNewMessages={() => {\r\n                subscribeToMore({\r\n                  document: CREATE_MESSAGES_SUB,\r\n                  variables: {\r\n                    roomId: match.params.roomId\r\n                  },\r\n                  updateQuery: (prev, { subscriptionData }) => {\r\n                    if (!subscriptionData.data) return prev;\r\n                    const newMessage = subscriptionData.data.onCreateMessage;\r\n                    return Object.assign({}, prev, {\r\n                      getRoom: {\r\n                        ...prev.getRoom,\r\n                        messages: {\r\n                          ...prev.getRoom.messages,\r\n                          items: [\r\n                            newMessage,\r\n                            ...prev.getRoom.messages.items.filter(\r\n                              item => item.id !== newMessage.id\r\n                            )\r\n                          ]\r\n                        }\r\n                      }\r\n                    });\r\n                  }\r\n                });\r\n              }}\r\n              onSend={content => {\r\n                mutate({\r\n                  variables: {\r\n                    content,\r\n                    roomId: match.params.roomId,\r\n                    when: new Date()\r\n                  },\r\n                  optimisticResponse: () => ({\r\n                    createMessage: {\r\n                      __typename: \"Message\",\r\n                      id: uuid(),\r\n                      when: new Date(),\r\n                      owner: username,\r\n                      content\r\n                    }\r\n                  }),\r\n                  update: (cache, { data: { createMessage } }) => {\r\n                    const data = cache.readQuery({\r\n                      query: GET_ROOM_MESSAGES,\r\n                      variables: { roomId: match.params.roomId }\r\n                    });\r\n                    data.getRoom.messages.items = [\r\n                      createMessage,\r\n                      ...data.getRoom.messages.items.filter(\r\n                        item => item.id !== createMessage.id\r\n                      )\r\n                    ];\r\n\r\n                    cache.writeQuery({\r\n                      query: GET_ROOM_MESSAGES,\r\n                      variables: { roomId: match.params.roomId },\r\n                      data\r\n                    });\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n        </Mutation>\r\n      )}\r\n    </Query>\r\n  );\r\n}\r\n\r\nexport default withUser(ChatWithData);","import React, { Component } from \"react\";\nimport AWSAppSyncClient from \"aws-appsync\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport { withAuthenticator } from \"aws-amplify-react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"react-apollo-hooks\";\nimport { Rehydrated } from \"aws-appsync-react\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport AppSyncConfig from \"./aws-exports\";\nimport Rooms from \"./Rooms\";\n//import Chat from \"./Chat\";\nimport ChatWithData from \"./ChatWithData\";\n\n\n\n\n\n\nAmplify.configure(AppSyncConfig);\n\nconst client = new AWSAppSyncClient({\n  url: AppSyncConfig.aws_appsync_graphqlEndpoint,\n  region: AppSyncConfig.aws_appsync_region,\n  auth: {\n    type: AppSyncConfig.aws_appsync_authenticationType,\n    credentials: () => Auth.currentCredentials(),\n    jwtToken: async () =>\n      (await Auth.currentSession()).getAccessToken().getJwtToken()\n  },\n  complexObjectsCredentials: () => Auth.currentCredentials()\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <ApolloHooksProvider client={client}>\n        <Rehydrated>\n          <Router>\n            <Switch>\n              <Route path=\"/room/:roomId\" component={ChatWithData} />\n              <Route path=\"/\" component={Rooms} />\n            </Switch>\n          </Router>\n        </Rehydrated>\n        </ApolloHooksProvider>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default withAuthenticator(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}